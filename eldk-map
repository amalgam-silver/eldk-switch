#!/bin/bash
#
# Backend to query the eldk-map.dat database containing data needed by eldk-switch.
#
# The data file(s) contain these two-column tables:
#  board_to_cpu    : maps board names to the cpu it uses
#  cpu_to_eldkcc   : maps cpu names to ELDK CROSS_COMPILE settings
#  eldkcc_to_arch  : maps cpu names to possible ARCH settings
#  alias_to_eldkcc : maps alias names to ELDK CROSS_COMPILE settings
#
# The data files(s) are plain text files.  Everything in a line after
# a '#' is considered to be a comment.  Tables begin with special
# lines of the form '[<section_name>]'.  Everything following such a
# line up to the next section or eof belongs to that table.
#
# If a file contains multiple sections with the same name only the
# first one will be used.
#
# In order to allow easy overriding of the distributed settings, these
# data files are considerd in order: ~/.eldk-map.dat, eldk-map.dat and
# eldk-map-local.dat.  The latter two are to be found in $DATADIR.
#
# (C) 2007-2008 by Detlev Zundel, <dzu@denx.de> DENX Software Engineering GmbH

DATADIR=/usr/local/share/eldk
DATAFILES="$HOME/.eldk-map.dat ${DATADIR}/eldk-map.dat ${DATADIR}/eldk-map-local.dat"

usage () {
    echo "usage: $(basename $0) <from> <to> <key>"				1>&2
    echo "	The table { <from>, <to> } is queried for <from> = <key>"	1>&2
    echo "	where <from> and <to> are fieldnames."				1>&2
    echo "       $(basename $0) <column>"					1>&2
    echo "	Lists all possible values for <column> where"			1>&2
    echo "	<column> is a fieldname."					1>&2
    echo "	Valid field names: 'board', 'cpu', 'eldkcc', 'arch', '(a)lias'"	1>&2
    echo "	(can be abbreviated as 'b', 'c', 'e', 'a', 'l')"		1>&2
    echo ""									1>&2
    echo "	Examples:"							1>&2
    echo "	eldk-map c b ppc440epx  - show all boards using 440EPx"		1>&2
    echo "	eldk-map e b ppc_8xx    - show all boards using ppc_8xx-"	1>&2
    echo "	  as CROSS_COMPILE."						1>&2
    echo "	eldk-map c              - show all known CPUs"			1>&2
    echo "	eldk-map v              - verify integrity of database"		1>&2
    exit 1
}

toupper () {
    echo $1 | tr 'a-z' 'A-Z'
}

tolower () {
    echo $1 | tr 'A-Z' 'a-z'
}

# "Database" accessor functions
# Get a section from a single datafile
get_section_file () {
    ( [ -r $2 ] && cat $2 ) | \
	sed -n '/^\['$1'\]/I,/^\[/I {s/\[.*\]//; s/#.*//; /^$/d; p}'
}

# Get a section from our datafiles
get_section () {
    for file in $DATAFILES; do
	get_section_file $1 $file
    done
}

# Match first column
match_first_col () {
    sed -n '/^'"$1"'\>/I { s/^.*[ \t]\+\(.\+\)$/\1/ ; p }'
}

# Match second column
match_second_col () {
    sed -n '/\<'"$1"'$/I { s/^\(.\+\)[ \t]\+.*$/\1/ ; p }'
}

# Get column
get_col () {
    sed 's/^\(.\+\)[ \t]\+\(.\+\)$/\'"$1"'/'
}

if [ $# -eq 1 ]
then
    # Lookup all values
    column=$(tolower $1)
    case ${column:0:1} in
	a)	get_section eldkcc_to_arch | get_col 2 | sort | uniq ;;
	b)      get_section board_to_cpu | get_col 1 | sort | uniq ;;
	c)	get_section cpu_to_eldkcc | get_col 1 | sort | uniq ;;
	e)      get_section cpu_to_eldkcc | get_col 2 | sort | uniq ;;
	l)	get_section alias_to_eldkcc | get_col 1 | sort | uniq ;;
	v)	echo "Verifying board -> cpu -> eldk_cc chains" 1>&2
		for file in $DATAFILES; do
		    for cpu in $(get_section_file board_to_cpu $file | get_col 2) ; do
			if [ -z "$(get_section cpu_to_eldkcc | match_first_col $(toupper $cpu))" ] ; then
			    echo "$file: unknown CPU $cpu" 1>&2
			fi
		    done
		done
		echo "Verifying cpu -> eldk_cc -> arch chains" 1>&2
		for file in $DATAFILES; do
		    for eldkcc in $(get_section_file cpu_to_eldkcc $file | get_col 2) ; do
			if [ -z "$(get_section eldkcc_to_arch | match_first_col $(toupper $eldkcc))" ] ; then
			    echo "$file: $eldkcc doesn't map to an arch value" 1>&2
			fi
		    done
		done ;;
	*)	echo "$0: unknown column $1" 1>&2 ; exit 1 ;;
    esac
elif [ $# -eq 3 ]
then
    # Map a $key through a table
    from=$(tolower $1)
    to=$(tolower $2)
    key=$(toupper $3)

    # Verify parameter
    case "${from:0:1}" in
	l)	[ -z "$(get_section alias_to_eldkcc | match_first_col $key)" ] && \
		( echo "unknown alias '$key'" 1>&2 ; exit 1 ) ;;
	b)	[ -z "$(get_section board_to_cpu | match_first_col $key)" ] && \
		(echo "unknown board '$key'" 1>&2 ; exit 1 ) ;;
	c)	[ -z "$(get_section cpu_to_eldkcc | match_first_col $key)" ] && \
		(echo "unknown cpu '$key'" 1>&2 ; exit 1 ) ;;
	e)	[ -z "$(get_section cpu_to_eldkcc | match_second_col $key)" ] && \
		(echo "unknown eldkcc '$key'" 1>&2 ; exit 1 );;
    esac

    # Do the lookup
    case "${from:0:1},${to:0:1}" in
	l,e)    get_section alias_to_eldkcc | match_first_col $key | head -1 ;;
	b,c)	get_section board_to_cpu | match_first_col $key | head -1 ;;
	c,e)	get_section cpu_to_eldkcc | match_first_col $key | head -1 ;;
	c,b)	get_section board_to_cpu | match_second_col $key ;;
	e,a)	get_section eldkcc_to_arch | match_first_col $key | head -1 ;;
	e,b)	for cpu in $(get_section cpu_to_eldkcc | match_second_col $key) ; do
		    get_section board_to_cpu | match_second_col $(toupper $cpu)
		done ;;
	e,c)	get_section cpu_to_eldkcc | match_second_col $key ;;
	*)	echo "unknown lookup operation $from -> $to" 1>&2
		exit 1 ;;
    esac
else
    usage
fi
